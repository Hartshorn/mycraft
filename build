

#####################################################################
#																	# 
#					mycraft build script							#
#																	#
#####################################################################

# notes:
# add something about clang: scan-build and scan-view (remember to run scan-build ./build)
# also something about valgrind



SOURCE='src/mycraft.c'

OBJECTS='deps/lodepng/lodepng.c deps/tinycthread/tinycthread.c src/error.c src/callbacks.c src/textures.c src/shaders.c src/db.c src/util.c src/map.c src/world.c src/worker.c'

LIBS='-lGL -lGLEW -lglfw'

OUT='-o bin/mycraft'

CFLAGS='-g -Wall -std=c99 -O0 -pthread' 

# for verbose, add -v
CC='clang'

TEST_SOURCE='test/src/mycraft_test.c'

TEST_OBJECTS='deps/lodepng/lodepng.c deps/tinycthread/tinycthread.c src/util.c src/callbacks.c src/map.c src/db.c src/world.c src/worker.c'

TEST_OUT='-o test/out/mycraft_test'

TEST_RUN='./test/out/mycraft_test'

#
# cleanup section
# if only cleaning, just exit
#
if [ "$1" == "clean" ]; then
	echo
	echo "	Cleaning up. . . "
	rm -f bin/* test/out/*
	echo
	echo "	Done Cleaning up."
	echo
	
	if [ "$2" == "only" ]; then
		echo "	Clean Only Exiting. . ."
		echo
		exit 0;
	fi
fi

#
# for the actual test cases, we will likely need the compiled sources
# to exists at the time that we run them, so that will need to happen.
# here we are just running tests with no source (since we arent using
# then yet.
#
if [ "$2" == "test" ] || [ "$1" == "test" ]; then
	echo "	Building Tests . . ."
	$CC $CFLAGS $TEST_OUT $TEST_OBJECTS $TEST_SOURCE
	echo
	echo "	Running Tests . . ."
	echo
	$TEST_RUN
	echo
	echo "	Tests complete."
	echo
	exit 0;
fi

$CC $CFLAGS $LIBS $OUT $OBJECTS $SOURCE

